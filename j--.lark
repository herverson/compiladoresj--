start : main_class (class_declaration)*
main_class : "class" identifier "{" "public" "static" "void" "main" "(" "int []" identifier ")" "{" statement "}" "}"
class_declaration : "class" identifier ( "extends" identifier )? "{" ( var_declaration )* ( method_declaration )* "}"
var_declaration : type identifier ";"
method_declaration : "public" type identifier "(" ( type identifier ( "," type identifier )* )? ")" "{" ( var_declaration )* ( statement )* "return" expression ";" "}"
type : "int" "[" "]" | "boolean" | "int" | identifier
statement : "{" ( statement )* "}"
            | "if" "("expression ")" statement "else" statement
            | "while" "(" expression ")" statement
            | "System.out.println" "(" expression ")" ";"
            | identifier "=" expression ";"
            | identifier "[" expression "]" "=" expression ";"
expression : expression ( "&&" | "<" | "+" | "-" | "*" ) expression
            | expression "[" expression "]"
            | expression "." "length"
            | expression "." identifier "(" ( expression ( "," expression )* )? ")"
            | DIGIT
            | "true"
            | "false"
            | identifier
            | "this"
            | "new" "int" "[" expression "]"
            | "new" identifier "(" ")"
            | "!" expression
            | "(" expression ")"
identifier : IDENTIFIER // letra ou _ seguidos de 0 ou mais variações de números e letras_
IDENTIFIER: /[a-zA-Z_][0-9a-zA-Z_]*/
%import common.WORD
%import common.DIGIT
%import common.ESCAPED_STRING
%import common.WS

%ignore WS
%ignore ESCAPED_STRING
